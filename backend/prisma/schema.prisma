generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String         @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  email        String         @unique @map("email")
  phone        String?        @unique @map("phone")
  fullName     String         @map("full_name")
  passwordHash String         @map("password_hash")
  createdAt    DateTime       @default(now()) @map("created_at")
  cartItems    CartItem[]
  cartLines    CartLine[]
  enrollments  Enrollment[]
  topicProgress TopicProgress[]
  sessions     UserSession[]

  @@map("users")
}

model Course {
  courseId    String      @id @default(dbgenerated("gen_random_uuid()")) @map("course_id") @db.Uuid
  courseName  String      @map("course_name")
  description String
  priceCents  Int         @default(0) @map("price_cents")
  createdAt   DateTime    @default(now()) @map("created_at")
  cartLines   CartLine[]
  enrollments Enrollment[]
  topics      Topic[]

  @@map("courses")
}

model CartItem {
  cartItemId  String   @id @default(dbgenerated("gen_random_uuid()")) @map("cart_item_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  courseSlug  String   @map("course_slug")
  courseTitle String   @map("course_title")
  coursePrice Int      @default(0) @map("course_price")
  courseData  Json?    @map("course_data")
  addedAt     DateTime @default(now()) @map("added_at")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, courseSlug], map: "uq_cart_item_user_slug")
  @@map("cart_items")
}

model CartLine {
  cartLineId   String     @id @default(dbgenerated("gen_random_uuid()")) @map("cart_line_id") @db.Uuid
  userId       String     @map("user_id") @db.Uuid
  courseId     String     @map("course_id") @db.Uuid
  status       String     @default("open")
  quantity     Int        @default(1)
  addedAt      DateTime   @default(now()) @map("added_at")
  checkedOutAt DateTime?  @map("checked_out_at")
  checkoutRef  String?    @map("checkout_ref")
  user         User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  course       Course     @relation(fields: [courseId], references: [courseId], onDelete: Restrict)

  @@map("cart_lines")
}

model Enrollment {
  enrollmentId String   @id @default(dbgenerated("gen_random_uuid()")) @map("enrollment_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  courseId     String   @map("course_id") @db.Uuid
  status       String   @default("active")
  paidCents    String?  @map("paid_cents")
  providerTxn  String?  @map("provider_txn")
  enrolledAt   DateTime @default(now()) @map("enrolled_at")
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([userId, courseId], map: "uq_user_course_enroll")
  @@map("enrollments")
}

model Topic {
  topicId     String          @id @default(dbgenerated("gen_random_uuid()")) @map("topic_id") @db.Uuid
  courseId    String          @map("course_id") @db.Uuid
  moduleNo    Int             @map("module_no")
  moduleName  String          @map("module_name")
  topicNumber Int             @map("topic_number")
  topicName   String          @map("topic_name")
  contentType String          @default("video") @map("content_type")
  videoUrl    String?         @map("video_url")
  textContent String?         @map("text_content")
  isPreview   Boolean         @default(false) @map("is_preview")
  createdAt   DateTime        @default(now()) @map("created_at")
  course      Course          @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  progress    TopicProgress[]

  @@unique([courseId, moduleNo, topicNumber], map: "uq_topic_per_module")
  @@map("topics")
}

model TopicProgress {
  progressId   String    @id @default(dbgenerated("gen_random_uuid()")) @map("progress_id") @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  topicId      String    @map("topic_id") @db.Uuid
  isCompleted  Boolean   @default(false) @map("is_completed")
  lastPosition Int       @default(0) @map("last_position_s")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  completedAt  DateTime? @map("completed_at")
  user         User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  topic        Topic     @relation(fields: [topicId], references: [topicId], onDelete: Cascade)

  @@unique([userId, topicId], map: "uq_progress_user_topic")
  @@map("topic_progress")
}

model UserSession {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  jwtId          String   @unique @map("jwt_id")
  refreshToken   String   @map("refresh_token")
  createdAt      DateTime @default(now()) @map("created_at")
  expiresAt      DateTime @map("expires_at")
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "idx_user_sessions_user_id")
  @@map("user_sessions")
}
