
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  phone: 'phone',
  fullName: 'fullName',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  courseId: 'courseId',
  courseName: 'courseName',
  description: 'description',
  priceCents: 'priceCents',
  createdAt: 'createdAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  cartItemId: 'cartItemId',
  userId: 'userId',
  courseSlug: 'courseSlug',
  courseTitle: 'courseTitle',
  coursePrice: 'coursePrice',
  courseData: 'courseData',
  addedAt: 'addedAt'
};

exports.Prisma.CartLineScalarFieldEnum = {
  cartLineId: 'cartLineId',
  userId: 'userId',
  courseId: 'courseId',
  status: 'status',
  quantity: 'quantity',
  addedAt: 'addedAt',
  checkedOutAt: 'checkedOutAt',
  checkoutRef: 'checkoutRef'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  enrollmentId: 'enrollmentId',
  userId: 'userId',
  courseId: 'courseId',
  status: 'status',
  paidCents: 'paidCents',
  providerTxn: 'providerTxn',
  enrolledAt: 'enrolledAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  topicId: 'topicId',
  courseId: 'courseId',
  moduleNo: 'moduleNo',
  moduleName: 'moduleName',
  topicNumber: 'topicNumber',
  topicName: 'topicName',
  contentType: 'contentType',
  videoUrl: 'videoUrl',
  textContent: 'textContent',
  isPreview: 'isPreview',
  createdAt: 'createdAt'
};

exports.Prisma.TopicProgressScalarFieldEnum = {
  progressId: 'progressId',
  userId: 'userId',
  topicId: 'topicId',
  isCompleted: 'isCompleted',
  lastPosition: 'lastPosition',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jwtId: 'jwtId',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Course: 'Course',
  CartItem: 'CartItem',
  CartLine: 'CartLine',
  Enrollment: 'Enrollment',
  Topic: 'Topic',
  TopicProgress: 'TopicProgress',
  UserSession: 'UserSession'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\BunnY\\OTTOBON Projects\\Course_Platform\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\BunnY\\OTTOBON Projects\\Course_Platform\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  userId        String          @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"user_id\") @db.Uuid\n  email         String          @unique @map(\"email\")\n  phone         String?         @unique @map(\"phone\")\n  fullName      String          @map(\"full_name\")\n  passwordHash  String          @map(\"password_hash\")\n  createdAt     DateTime        @default(now()) @map(\"created_at\")\n  cartItems     CartItem[]\n  cartLines     CartLine[]\n  enrollments   Enrollment[]\n  topicProgress TopicProgress[]\n  sessions      UserSession[]\n\n  @@map(\"users\")\n}\n\nmodel Course {\n  courseId    String       @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"course_id\") @db.Uuid\n  courseName  String       @map(\"course_name\")\n  description String\n  priceCents  Int          @default(0) @map(\"price_cents\")\n  createdAt   DateTime     @default(now()) @map(\"created_at\")\n  cartLines   CartLine[]\n  enrollments Enrollment[]\n  topics      Topic[]\n\n  @@map(\"courses\")\n}\n\nmodel CartItem {\n  cartItemId  String   @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"cart_item_id\") @db.Uuid\n  userId      String   @map(\"user_id\") @db.Uuid\n  courseSlug  String   @map(\"course_slug\")\n  courseTitle String   @map(\"course_title\")\n  coursePrice Int      @default(0) @map(\"course_price\")\n  courseData  Json?    @map(\"course_data\")\n  addedAt     DateTime @default(now()) @map(\"added_at\")\n  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)\n\n  @@unique([userId, courseSlug], map: \"uq_cart_item_user_slug\")\n  @@map(\"cart_items\")\n}\n\nmodel CartLine {\n  cartLineId   String    @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"cart_line_id\") @db.Uuid\n  userId       String    @map(\"user_id\") @db.Uuid\n  courseId     String    @map(\"course_id\") @db.Uuid\n  status       String    @default(\"open\")\n  quantity     Int       @default(1)\n  addedAt      DateTime  @default(now()) @map(\"added_at\")\n  checkedOutAt DateTime? @map(\"checked_out_at\")\n  checkoutRef  String?   @map(\"checkout_ref\")\n  user         User      @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  course       Course    @relation(fields: [courseId], references: [courseId], onDelete: Restrict)\n\n  @@map(\"cart_lines\")\n}\n\nmodel Enrollment {\n  enrollmentId String   @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"enrollment_id\") @db.Uuid\n  userId       String   @map(\"user_id\") @db.Uuid\n  courseId     String   @map(\"course_id\") @db.Uuid\n  status       String   @default(\"active\")\n  paidCents    String?  @map(\"paid_cents\")\n  providerTxn  String?  @map(\"provider_txn\")\n  enrolledAt   DateTime @default(now()) @map(\"enrolled_at\")\n  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  course       Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)\n\n  @@unique([userId, courseId], map: \"uq_user_course_enroll\")\n  @@map(\"enrollments\")\n}\n\nmodel Topic {\n  topicId     String          @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"topic_id\") @db.Uuid\n  courseId    String          @map(\"course_id\") @db.Uuid\n  moduleNo    Int             @map(\"module_no\")\n  moduleName  String          @map(\"module_name\")\n  topicNumber Int             @map(\"topic_number\")\n  topicName   String          @map(\"topic_name\")\n  contentType String          @default(\"video\") @map(\"content_type\")\n  videoUrl    String?         @map(\"video_url\")\n  textContent String?         @map(\"text_content\")\n  isPreview   Boolean         @default(false) @map(\"is_preview\")\n  createdAt   DateTime        @default(now()) @map(\"created_at\")\n  course      Course          @relation(fields: [courseId], references: [courseId], onDelete: Cascade)\n  progress    TopicProgress[]\n\n  @@unique([courseId, moduleNo, topicNumber], map: \"uq_topic_per_module\")\n  @@map(\"topics\")\n}\n\nmodel TopicProgress {\n  progressId   String    @id @default(dbgenerated(\"gen_random_uuid()\")) @map(\"progress_id\") @db.Uuid\n  userId       String    @map(\"user_id\") @db.Uuid\n  topicId      String    @map(\"topic_id\") @db.Uuid\n  isCompleted  Boolean   @default(false) @map(\"is_completed\")\n  lastPosition Int       @default(0) @map(\"last_position_s\")\n  updatedAt    DateTime  @default(now()) @map(\"updated_at\")\n  completedAt  DateTime? @map(\"completed_at\")\n  user         User      @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  topic        Topic     @relation(fields: [topicId], references: [topicId], onDelete: Cascade)\n\n  @@unique([userId, topicId], map: \"uq_progress_user_topic\")\n  @@map(\"topic_progress\")\n}\n\nmodel UserSession {\n  id           String   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  userId       String   @map(\"user_id\") @db.Uuid\n  jwtId        String   @unique @map(\"jwt_id\")\n  refreshToken String   @map(\"refresh_token\")\n  createdAt    DateTime @default(now()) @map(\"created_at\")\n  expiresAt    DateTime @map(\"expires_at\")\n  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)\n\n  @@index([userId], map: \"idx_user_sessions_user_id\")\n  @@map(\"user_sessions\")\n}\n",
  "inlineSchemaHash": "db5e02cca89a41b5326bad50fe054314dea187f5951b918505ce87e5574b8506",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"email\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"phone\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"full_name\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"password_hash\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"cartItems\",\"kind\":\"object\",\"type\":\"CartItem\",\"relationName\":\"CartItemToUser\"},{\"name\":\"cartLines\",\"kind\":\"object\",\"type\":\"CartLine\",\"relationName\":\"CartLineToUser\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"topicProgress\",\"kind\":\"object\",\"type\":\"TopicProgress\",\"relationName\":\"TopicProgressToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"UserSession\",\"relationName\":\"UserToUserSession\"}],\"dbName\":\"users\"},\"Course\":{\"fields\":[{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_id\"},{\"name\":\"courseName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_name\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priceCents\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"price_cents\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"cartLines\",\"kind\":\"object\",\"type\":\"CartLine\",\"relationName\":\"CartLineToCourse\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"topics\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"CourseToTopic\"}],\"dbName\":\"courses\"},\"CartItem\":{\"fields\":[{\"name\":\"cartItemId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"cart_item_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"courseSlug\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_slug\"},{\"name\":\"courseTitle\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_title\"},{\"name\":\"coursePrice\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"course_price\"},{\"name\":\"courseData\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"course_data\"},{\"name\":\"addedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"added_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CartItemToUser\"}],\"dbName\":\"cart_items\"},\"CartLine\":{\"fields\":[{\"name\":\"cartLineId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"cart_line_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_id\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"addedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"added_at\"},{\"name\":\"checkedOutAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"checked_out_at\"},{\"name\":\"checkoutRef\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"checkout_ref\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CartLineToUser\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CartLineToCourse\"}],\"dbName\":\"cart_lines\"},\"Enrollment\":{\"fields\":[{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"enrollment_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_id\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paidCents\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"paid_cents\"},{\"name\":\"providerTxn\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"provider_txn\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"enrolled_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToEnrollment\"}],\"dbName\":\"enrollments\"},\"Topic\":{\"fields\":[{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"topic_id\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"course_id\"},{\"name\":\"moduleNo\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"module_no\"},{\"name\":\"moduleName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"module_name\"},{\"name\":\"topicNumber\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"topic_number\"},{\"name\":\"topicName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"topic_name\"},{\"name\":\"contentType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content_type\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"video_url\"},{\"name\":\"textContent\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"text_content\"},{\"name\":\"isPreview\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_preview\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToTopic\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"TopicProgress\",\"relationName\":\"TopicToTopicProgress\"}],\"dbName\":\"topics\"},\"TopicProgress\":{\"fields\":[{\"name\":\"progressId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"progress_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"topic_id\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_completed\"},{\"name\":\"lastPosition\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"last_position_s\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TopicProgressToUser\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"TopicToTopicProgress\"}],\"dbName\":\"topic_progress\"},\"UserSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"jwtId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"jwt_id\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"refresh_token\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSession\"}],\"dbName\":\"user_sessions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

